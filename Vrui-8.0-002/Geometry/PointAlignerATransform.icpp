/***********************************************************************
PointAlignerATransform - Least-squares optimization kernel for point
set alignment using general affine transformations.
Copyright (c) 2018 Oliver Kreylos

This file is part of the Templatized Geometry Library (TGL).

The Templatized Geometry Library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Templatized Geometry Library is distributed in the hope that it will
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Templatized Geometry Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA
***********************************************************************/

#define GEOMETRY_POINTALIGNERATRANSFORM_IMPLEMENTATION

#include <Geometry/PointAlignerATransform.h>

#include <Math/Matrix.h>

namespace Geometry {

/***************************************
Methods of class PointAlignerATransform:
***************************************/

template <class ScalarParam,int dimensionParam>
inline
void
PointAlignerATransform<ScalarParam,dimensionParam>::estimateTransform(
	void)
	{
	/* Build the least-squares system of linear equations: */
	Math::Matrix ata(numVariables,numVariables,0.0);
	Math::Matrix atb(numVariables,1,0.0);
	for(typename std::vector<PointPair>::const_iterator ppIt=pointPairs.begin();ppIt!=pointPairs.end();++ppIt)
		{
		/* Condition the "from" point: */
		Point fromn;
		for(int i=0;i<dimension;++i)
			fromn[i]=(ppIt->from[i]-fromCenter[i])*fromScale;
		
		/* Condition the "to" point: */
		Point ton;
		for(int i=0;i<dimension;++i)
			ton[i]=(ppIt->to[i]-toCenter[i])*toScale;
		
		/* Enter the normalized point pair's equations into the least-squares matrix: */
		double row[numVariables];
		for(int eq=0;eq<dimension;++eq)
			{
			for(int block=0;block<dimension;++block)
				{
				if(block==eq)
					{
					for(int i=0;i<dimension;++i)
						row[block*(dimension+1)+i]=double(fromn[i]);
					row[block*(dimension+1)+dimension]=1.0;
					}
				else
					{
					for(int i=0;i<=dimension;++i)
						row[block*(dimension+1)+i]=0.0;
					}
				}
			
			for(unsigned int i=0;i<numVariables;++i)
				{
				for(unsigned int j=0;j<numVariables;++j)
					ata(i,j)+=row[i]*row[j];
				atb(i)+=row[i]*ton[eq];
				}
			}
		}
	
	/* Solve the least-squares system: */
	Math::Matrix x=atb.divideFullPivot(ata);
	
	/* Create the transformation: */
	for(int i=0;i<dimension;++i)
		for(int j=0;j<=dimension;++j)
			current.getMatrix()(i,j)=Scalar(x(i*(dimension+1)+j));
	}

template <class ScalarParam,int dimensionParam>
inline
typename PointAlignerATransform<ScalarParam,dimensionParam>::Transform
PointAlignerATransform<ScalarParam,dimensionParam>::getTransform(
	void) const
	{
	/* De-condition the current transformation: */
	Transform result=Transform::translateFromOriginTo(toCenter);
	result*=Transform::scale(Scalar(1)/toScale);
	result*=current;
	result*=Transform::scale(fromScale);
	result*=Transform::translateToOriginFrom(fromCenter);
	
	return result;
	}

template <class ScalarParam,int dimensionParam>
inline
void
PointAlignerATransform<ScalarParam,dimensionParam>::calcDerivativeBatch(
	unsigned int batchIndex,
	typename PointAlignerATransform<ScalarParam,dimensionParam>::Scalar derivs[PointAlignerATransform<ScalarParam,dimensionParam>::numFunctionsInBatch][PointAlignerATransform<ScalarParam,dimensionParam>::numVariables]) const
	{
	/* Get the point pair associated with the given function batch: */
	const PointPair& pp=pointPairs[batchIndex];
	
	/* Condition the "from" point: */
	Point fromn;
	for(int i=0;i<dimension;++i)
		fromn[i]=(pp.from[i]-fromCenter[i])*fromScale;
	
	/* Calculate the function batch's partial derivatives: */
	for(int eq=0;eq<dimension;++eq)
		{
		for(int block=0;block<dimension;++block)
			{
			if(block==eq)
				{
				for(int i=0;i<dimension;++i)
					derivs[eq][block*(dimension+1)+i]=-fromn[i];
				derivs[eq][block*(dimension+1)+dimension]=-Scalar(1);
				}
			else
				{
				for(int i=0;i<=dimension;++i)
					derivs[eq][block*(dimension+1)+i]=Scalar(0);
				}
			}
		}
	}

}
